[pools]
# Pools for each service type
# ----------------------------
#
# The value is a ';'-separated of targets.
# Each target is a ','-separated list of:
# - the number of services to pick,
# - the name of a slot where to pick the services,
# - the name of a slot where to pick services if there is
#   not enough in the previous slot
# - and so on...
#
# Pool are automatically created if not defined in configuration.
<% @pools.keys.sort.each do |key| -%>
<%= key %>=<%= @pools[key] %>
<% end -%>

[score_expr]
meta0=root(2,((num stat.cpu)*(num stat.io)))
meta1=((num stat.space)>=5) * root(3,((num stat.cpu)*(num stat.space)*(num stat.io)))
meta2=((num stat.space)>=5) * root(3,((num stat.cpu)*(num stat.space)*(num stat.io)))
rawx=(num tag.up) * ((num stat.space)>=5) * root(3,((num stat.cpu)*(num stat.space)*(num stat.io)))
sqlx=((num stat.space)>=5) * root(3,((num stat.cpu)*(num stat.space)*(num stat.io)))
account=(num tag.up) * (num stat.cpu)
rdir=(num tag.up) * (num stat.cpu) * ((num stat.space)>=2)
oiofs=(num stat.cpu)
redis=(num tag.up) * (num stat.cpu)
echo=(num stat.cpu)
oiofs=(num stat.cpu)

[score_timeout]
# Defaults to 300s
<% @services_score_timeout.keys.sort.each do |key| -%>
<%= key %>=<%= @services_score_timeout[key] %>
<% end -%>

[score_variation_bound]
# Defaults to 5s

[score_lock_at_first_register]
<% @score_lock_at_first_register.keys.sort.each do |key| -%>
<%= key %>=<%= @score_lock_at_first_register[key] %>
<% end -%>
